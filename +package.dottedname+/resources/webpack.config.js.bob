const webpack = require('webpack');
const path = require('path');
const merge = require('webpack-merge');

const PlonePlugin = require('plonetheme-webpack-plugin');

const SITENAME = process.env.SITENAME || '{{{ site.siteid }}}';
const THEMENAME = process.env.THEMENAME || '{{{ theme.folder }}}';
const PUBLICPATH = process.env.PUBLICPATH || '/' + SITENAME + '/++theme++' + THEMENAME + '/';

const PATHS = {
  src: path.join(__dirname, 'src', THEMENAME),
  build: path.join(__dirname, 'theme', THEMENAME)
};

const PLONE = new PlonePlugin({
  portalUrl: 'http://localhost:8080/' + SITENAME,
  publicPath: PUBLICPATH,
  sourcePath: PATHS.src
});

const common = {
  entry: {
   'default': path.join(PATHS.src, 'default'),
   'logged-in': path.join(PATHS.src, 'logged-in')
  },
  output: {
    path: PATHS.build
  },
  devServer: {
    outputPath: PATHS.build
  },
  resolve: {
    extensions: ['', '.js', '.jsx'],
    alias: {
{{% if plone.version.startswith('5-latest') %}}
      'mockup-patterns-querystring': path.join(  // broken in Plone 5.0.x with Webpack
         __dirname, 'node_modules/mockup/mockup/patterns/querystring/pattern')
{{% elif plone.version.startswith('5.0') %}}
      'mockup-patterns-querystring': path.join(  // broken in Plone 5.0.x with Webpack
         __dirname, 'node_modules/mockup/mockup/patterns/querystring/pattern')
{{% elif plone.version.startswith('5.1') %}}
      'mockup-patterns-structure': path.join(
        __dirname, 'node_modules', 'mockup', 'mockup', 'patterns', 'structure', 'pattern'),
      'mockup-patterns-structure-url': path.join(
__dirname, 'node_modules', 'mockup', 'mockup', 'patterns', 'structure')
{{% endif %}}
    }
  },
  module: {
{{% if plone.version.startswith('5.1') %}}
    exprContextCritical: false,  // structure pattern has dynamic requires
{{% endif %}}
    loaders: [
      { test: /\.jsx?$/,
        loaders: ['babel?cacheDirectory'],
        include: PATHS.src }
    ]
  }
};

switch(path.basename(process.argv[1])) {
  case 'webpack':
    module.exports = merge(PLONE.production, common);
    break;

  case 'webpack-dev-server':
    module.exports = merge(PLONE.development, common, {
      entry: [
        path.join(PATHS.src, 'default'),
        path.join(PATHS.src, 'logged-in')
      ]
    });
    break;
}
